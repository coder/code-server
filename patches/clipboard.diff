Index: code-server/lib/vscode/src/vs/workbench/api/browser/mainThreadCLICommands.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/api/browser/mainThreadCLICommands.ts
+++ code-server/lib/vscode/src/vs/workbench/api/browser/mainThreadCLICommands.ts
@@ -8,6 +8,7 @@ import { isWeb } from '../../../base/com
 import { isString } from '../../../base/common/types.js';
 import { URI, UriComponents } from '../../../base/common/uri.js';
 import { localize } from '../../../nls.js';
+import { IClipboardService } from '../../../platform/clipboard/common/clipboardService.js';
 import { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';
 import { IExtensionGalleryService, IExtensionManagementService } from '../../../platform/extensionManagement/common/extensionManagement.js';
 import { ExtensionManagementCLI } from '../../../platform/extensionManagement/common/extensionManagementCLI.js';
@@ -95,6 +96,11 @@ CommandsRegistry.registerCommand('_remot
 
 });
 
+CommandsRegistry.registerCommand('_remoteCLI.setClipboard', function (accessor: ServicesAccessor, content: string) {
+	const clipboardService = accessor.get(IClipboardService);
+	clipboardService.writeText(content);
+})
+
 class RemoteExtensionManagementCLI extends ExtensionManagementCLI {
 
 	private _location: string | undefined;
Index: code-server/lib/vscode/src/vs/workbench/api/node/extHostCLIServer.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/api/node/extHostCLIServer.ts
+++ code-server/lib/vscode/src/vs/workbench/api/node/extHostCLIServer.ts
@@ -44,7 +44,12 @@ export interface ExtensionManagementPipe
 	force?: boolean;
 }
 
-export type PipeCommand = OpenCommandPipeArgs | StatusPipeArgs | OpenExternalCommandPipeArgs | ExtensionManagementPipeArgs;
+export interface ClipboardPipeArgs {
+	type: 'clipboard';
+	content: string;
+}
+
+export type PipeCommand = OpenCommandPipeArgs | StatusPipeArgs | OpenExternalCommandPipeArgs | ExtensionManagementPipeArgs | ClipboardPipeArgs;
 
 export interface ICommandsExecuter {
 	executeCommand<T>(id: string, ...args: any[]): Promise<T>;
@@ -106,6 +111,9 @@ export class CLIServerBase {
 					case 'extensionManagement':
 						returnObj = await this.manageExtensions(data);
 						break;
+					case 'clipboard':
+						returnObj = await this.clipboard(data);
+						break;
 					default:
 						sendResponse(404, `Unknown message type: ${data.type}`);
 						break;
@@ -173,6 +181,10 @@ export class CLIServerBase {
 		return await this._commands.executeCommand<string | undefined>('_remoteCLI.getSystemStatus');
 	}
 
+	private async clipboard(data: ClipboardPipeArgs): Promise<undefined> {
+		return await this._commands.executeCommand('_remoteCLI.setClipboard', data.content);
+	}
+
 	dispose(): void {
 		this._server.close();
 
Index: code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/remoteTerminalBackend.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/contrib/terminal/browser/remoteTerminalBackend.ts
+++ code-server/lib/vscode/src/vs/workbench/contrib/terminal/browser/remoteTerminalBackend.ts
@@ -97,7 +97,7 @@ class RemoteTerminalBackend extends Base
 			}
 		});
 
-		const allowedCommands = ['_remoteCLI.openExternal', '_remoteCLI.windowOpen', '_remoteCLI.getSystemStatus', '_remoteCLI.manageExtensions'];
+		const allowedCommands = ['_remoteCLI.openExternal', '_remoteCLI.windowOpen', '_remoteCLI.getSystemStatus', '_remoteCLI.manageExtensions', '_remoteCLI.setClipboard'];
 		this._remoteTerminalChannel.onExecuteCommand(async e => {
 			// Ensure this request for for this window
 			const pty = this._ptys.get(e.persistentProcessId);
Index: code-server/lib/vscode/src/vs/platform/environment/common/argv.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/platform/environment/common/argv.ts
+++ code-server/lib/vscode/src/vs/platform/environment/common/argv.ts
@@ -122,6 +122,7 @@ export interface NativeParsedArgs {
 	'disable-chromium-sandbox'?: boolean;
 	sandbox?: boolean;
 	'enable-coi'?: boolean;
+	'stdin-to-clipboard'?: boolean;
 	'unresponsive-sample-interval'?: string;
 	'unresponsive-sample-period'?: string;
 
Index: code-server/lib/vscode/src/vs/platform/environment/node/argv.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/platform/environment/node/argv.ts
+++ code-server/lib/vscode/src/vs/platform/environment/node/argv.ts
@@ -91,6 +91,7 @@ export const OPTIONS: OptionDescriptions
 	'user-data-dir': { type: 'string', cat: 'o', args: 'dir', description: localize('userDataDir', "Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code.") },
 	'profile': { type: 'string', 'cat': 'o', args: 'profileName', description: localize('profileName', "Opens the provided folder or workspace with the given profile and associates the profile with the workspace. If the profile does not exist, a new empty one is created.") },
 	'help': { type: 'boolean', cat: 'o', alias: 'h', description: localize('help', "Print usage.") },
+	'stdin-to-clipboard': { type: 'boolean', cat: 'o', alias: 'c', description: localize('clipboard', "copies the STDIN to the clipboard") },
 
 	'extensions-dir': { type: 'string', deprecates: ['extensionHomePath'], cat: 'e', args: 'dir', description: localize('extensionHomePath', "Set the root path for extensions.") },
 	'extensions-download-dir': { type: 'string' },
Index: code-server/lib/vscode/src/vs/server/node/server.cli.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/server/node/server.cli.ts
+++ code-server/lib/vscode/src/vs/server/node/server.cli.ts
@@ -77,6 +77,7 @@ const isSupportedForPipe = (optionId: ke
 		case 'verbose':
 		case 'remote':
 		case 'locate-shell-integration-path':
+		case 'stdin-to-clipboard':
 			return true;
 		default:
 			return false;
@@ -295,6 +296,22 @@ export async function main(desc: Product
 			}
 		}
 	} else {
+		if (parsedArgs['stdin-to-clipboard']) {
+			if(!hasStdinWithoutTty()) {
+				console.error("stdin has a tty.");
+				return;
+			}
+			const stdinBuffer = fs.readFileSync(0); // STDIN_FILENO = 0
+			const clipboardContent = stdinBuffer.toString();
+			sendToPipe({
+				type: 'clipboard',
+				content: clipboardContent
+			}, verbose).catch(e => {
+				console.error('Error when requesting status:', e);
+			});
+			return;
+		}
+
 		if (parsedArgs.status) {
 			await sendToPipe({
 				type: 'status'
Index: code-server/lib/vscode/src/vs/workbench/services/clipboard/browser/clipboardService.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/services/clipboard/browser/clipboardService.ts
+++ code-server/lib/vscode/src/vs/workbench/services/clipboard/browser/clipboardService.ts
@@ -15,19 +15,36 @@ import { IWorkbenchEnvironmentService }
 import { ILogService } from '../../../../platform/log/common/log.js';
 import { ILayoutService } from '../../../../platform/layout/browser/layoutService.js';
 import { getActiveWindow } from '../../../../base/browser/dom.js';
+import { isSafari } from '../../../../base/browser/browser.js';
+import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';
 
 export class BrowserClipboardService extends BaseBrowserClipboardService {
 
 	constructor(
 		@INotificationService private readonly notificationService: INotificationService,
+		@IContextKeyService	private readonly contextKeyService: IContextKeyService,
 		@IOpenerService private readonly openerService: IOpenerService,
 		@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,
 		@ILogService logService: ILogService,
 		@ILayoutService layoutService: ILayoutService
 	) {
 		super(layoutService, logService);
+		if (isSafari) {
+			window.addEventListener('keydown', event => {
+				if (
+					(event.key.toLowerCase() === 'p' && this.contextKeyService.getContextKeyValue('vim.mode') === 'Normal') ||
+					(event.key === 'v' && (event.ctrlKey || event.metaKey) && this.contextKeyService.getContextKeyValue('vim.mode') === 'SearchInProgressMode')
+				) {
+					this.lastClipboardTextContent = navigator.clipboard.readText()
+					this.lastCLipboardTime = Date.now();
+				}
+			})
+		}
 	}
 
+	private lastClipboardTextContent?: Promise<string>
+	private lastCLipboardTime?: number
+
 	override async writeText(text: string, type?: string): Promise<void> {
 		if (!!this.environmentService.extensionTestsLocationURI && typeof type !== 'string') {
 			type = 'vscode-tests'; // force in-memory clipboard for tests to avoid permission issues
@@ -46,6 +63,15 @@ export class BrowserClipboardService ext
 		}
 
 		try {
+			if (isSafari && this.lastClipboardTextContent && this.lastCLipboardTime && Date.now() - this.lastCLipboardTime < 1000) {
+				try {
+					const content = await this.lastClipboardTextContent;
+					if (content) return content
+				} catch {
+					// ignore error, we will try to read from the clipboard
+				}
+			}
+
 			return await getActiveWindow().navigator.clipboard.readText();
 		} catch (error) {
 			return new Promise<string>(resolve => {
