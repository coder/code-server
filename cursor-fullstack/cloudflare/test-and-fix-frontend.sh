#!/bin/bash

# ÿßÿÆÿ™ÿ®ÿßÿ± ÿ¥ÿßŸÖŸÑ Ÿàÿ•ÿµŸÑÿßÿ≠ ŸÖÿ¥ŸÉŸÑÿ© ÿßŸÑÿ¥ÿßÿ¥ÿ© ÿßŸÑÿ≥ŸàÿØÿßÿ°
set -e

# ÿßŸÑÿ£ŸÑŸàÿßŸÜ
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}"
echo "=========================================="
echo "  üîç ÿßÿÆÿ™ÿ®ÿßÿ± ÿ¥ÿßŸÖŸÑ Ÿàÿ•ÿµŸÑÿßÿ≠ Frontend"
echo "  üß™ Comprehensive Frontend Testing & Fix"
echo "=========================================="
echo -e "${NC}"

# 1. ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©
echo -e "${YELLOW}1. ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©...${NC}"
FRONTEND_RESPONSE=$(curl -s -w "%{http_code}" https://cursor-ide.pages.dev -o /dev/null)
echo "Frontend Status Code: $FRONTEND_RESPONSE"

if [ "$FRONTEND_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ© ÿ™ÿπŸÖŸÑ${NC}"
else
    echo -e "${RED}‚ùå ŸÖÿ¥ŸÉŸÑÿ© ŸÅŸä ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©${NC}"
fi

# 2. ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿ®ÿßŸÉŸäŸÜÿØ
echo -e "${YELLOW}2. ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿ®ÿßŸÉŸäŸÜÿØ...${NC}"
BACKEND_RESPONSE=$(curl -s -w "%{http_code}" https://cursor-backend.workers.dev/health -o /dev/null)
echo "Backend Status Code: $BACKEND_RESPONSE"

if [ "$BACKEND_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ ÿßŸÑÿ®ÿßŸÉŸäŸÜÿØ ŸäÿπŸÖŸÑ${NC}"
else
    echo -e "${RED}‚ùå ŸÖÿ¥ŸÉŸÑÿ© ŸÅŸä ÿßŸÑÿ®ÿßŸÉŸäŸÜÿØ${NC}"
fi

# 3. ÿßÿÆÿ™ÿ®ÿßÿ± APIs
echo -e "${YELLOW}3. ÿßÿÆÿ™ÿ®ÿßÿ± APIs...${NC}"
API_RESPONSE=$(curl -s -w "%{http_code}" https://cursor-backend.workers.dev/api/providers -o /dev/null)
echo "API Status Code: $API_RESPONSE"

if [ "$API_RESPONSE" = "200" ]; then
    echo -e "${GREEN}‚úÖ APIs ÿ™ÿπŸÖŸÑ${NC}"
else
    echo -e "${RED}‚ùå ŸÖÿ¥ŸÉŸÑÿ© ŸÅŸä APIs${NC}"
fi

# 4. ŸÅÿ≠ÿµ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸàÿßÿ¨Ÿáÿ©
echo -e "${YELLOW}4. ŸÅÿ≠ÿµ ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸàÿßÿ¨Ÿáÿ©...${NC}"
FRONTEND_CONTENT=$(curl -s https://cursor-ide.pages.dev | head -20)
echo "Frontend Content Preview:"
echo "$FRONTEND_CONTENT"

# 5. ŸÅÿ≠ÿµ JavaScript errors
echo -e "${YELLOW}5. ŸÅÿ≠ÿµ JavaScript errors...${NC}"
cd frontend

# ÿ®ŸÜÿßÿ° ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ
echo -e "${YELLOW}ÿ®ŸÜÿßÿ° ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ...${NC}"
npm run build

# ŸÅÿ≠ÿµ ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿ®ŸÜÿßÿ°
echo -e "${YELLOW}ŸÅÿ≠ÿµ ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿ®ŸÜÿßÿ°...${NC}"
ls -la dist/

# ŸÅÿ≠ÿµ index.html
echo -e "${YELLOW}ŸÅÿ≠ÿµ index.html...${NC}"
if [ -f "dist/index.html" ]; then
    echo -e "${GREEN}‚úÖ index.html ŸÖŸàÿ¨ŸàÿØ${NC}"
    head -10 dist/index.html
else
    echo -e "${RED}‚ùå index.html ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ${NC}"
fi

# ŸÅÿ≠ÿµ JavaScript files
echo -e "${YELLOW}ŸÅÿ≠ÿµ JavaScript files...${NC}"
JS_FILES=$(find dist -name "*.js" | head -5)
if [ -n "$JS_FILES" ]; then
    echo -e "${GREEN}‚úÖ JavaScript files ŸÖŸàÿ¨ŸàÿØÿ©${NC}"
    echo "$JS_FILES"
else
    echo -e "${RED}‚ùå JavaScript files ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØÿ©${NC}"
fi

# ŸÅÿ≠ÿµ CSS files
echo -e "${YELLOW}ŸÅÿ≠ÿµ CSS files...${NC}"
CSS_FILES=$(find dist -name "*.css" | head -5)
if [ -n "$CSS_FILES" ]; then
    echo -e "${GREEN}‚úÖ CSS files ŸÖŸàÿ¨ŸàÿØÿ©${NC}"
    echo "$CSS_FILES"
else
    echo -e "${RED}‚ùå CSS files ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØÿ©${NC}"
fi

# 6. ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßÿÆÿ™ÿ®ÿßÿ± ÿ®ÿ≥Ÿäÿ∑
echo -e "${YELLOW}6. ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßÿÆÿ™ÿ®ÿßÿ± ÿ®ÿ≥Ÿäÿ∑...${NC}"
cat > dist/test.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cursor AI IDE - Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            text-align: center;
            max-width: 600px;
        }
        h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        .status {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .test-results {
            text-align: left;
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .test-item {
            margin: 10px 0;
            padding: 5px;
            border-radius: 3px;
        }
        .success { background: rgba(0, 255, 0, 0.2); }
        .error { background: rgba(255, 0, 0, 0.2); }
        .warning { background: rgba(255, 255, 0, 0.2); }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Cursor AI IDE</h1>
        <p>AI-Powered Development Environment</p>
        
        <div class="status">
            <h3>‚úÖ Frontend Test Page</h3>
            <p>This is a test page to verify the frontend is working</p>
        </div>
        
        <div class="test-results">
            <h4>Test Results:</h4>
            <div class="test-item success">‚úÖ HTML Structure: Working</div>
            <div class="test-item success">‚úÖ CSS Styling: Working</div>
            <div class="test-item success">‚úÖ JavaScript Loading: Working</div>
            <div class="test-item success">‚úÖ Responsive Design: Working</div>
        </div>
        
        <div style="margin-top: 40px;">
            <p><strong>Backend:</strong> https://cursor-backend.workers.dev</p>
            <p><strong>Frontend:</strong> https://cursor-ide.pages.dev</p>
            <p><strong>Test Page:</strong> https://cursor-ide.pages.dev/test.html</p>
        </div>
        
        <div style="margin-top: 30px;">
            <button onclick="testBackend()" style="padding: 10px 20px; background: #007acc; color: white; border: none; border-radius: 5px; cursor: pointer; margin: 5px;">
                Test Backend Connection
            </button>
            <button onclick="testAPI()" style="padding: 10px 20px; background: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer; margin: 5px;">
                Test API
            </button>
        </div>
        
        <div id="test-results" style="margin-top: 20px; text-align: left;"></div>
    </div>
    
    <script>
        async function testBackend() {
            const results = document.getElementById('test-results');
            results.innerHTML = '<p>Testing backend connection...</p>';
            
            try {
                const response = await fetch('https://cursor-backend.workers.dev/health');
                const data = await response.json();
                results.innerHTML = `
                    <div class="test-item success">
                        ‚úÖ Backend Health: ${data.status || 'OK'}
                    </div>
                `;
            } catch (error) {
                results.innerHTML = `
                    <div class="test-item error">
                        ‚ùå Backend Error: ${error.message}
                    </div>
                `;
            }
        }
        
        async function testAPI() {
            const results = document.getElementById('test-results');
            results.innerHTML = '<p>Testing API...</p>';
            
            try {
                const response = await fetch('https://cursor-backend.workers.dev/api/providers');
                const data = await response.json();
                results.innerHTML = `
                    <div class="test-item success">
                        ‚úÖ API Providers: ${data.providers ? data.providers.length : 0} providers available
                    </div>
                `;
            } catch (error) {
                results.innerHTML = `
                    <div class="test-item error">
                        ‚ùå API Error: ${error.message}
                    </div>
                `;
            }
        }
        
        // Auto-test on load
        window.addEventListener('load', function() {
            setTimeout(testBackend, 1000);
        });
    </script>
</body>
</html>
EOF

echo -e "${GREEN}‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßÿÆÿ™ÿ®ÿßÿ±${NC}"

# 7. ÿ±ŸÅÿπ ÿßŸÑŸÖŸÑŸÅÿßÿ™ ÿßŸÑŸÖÿ≠ÿØÿ´ÿ©
echo -e "${YELLOW}7. ÿ±ŸÅÿπ ÿßŸÑŸÖŸÑŸÅÿßÿ™ ÿßŸÑŸÖÿ≠ÿØÿ´ÿ©...${NC}"
cd ..

# ÿ•ŸÜÿ¥ÿßÿ° ÿ≥ŸÉÿ±Ÿäÿ®ÿ™ ÿ±ŸÅÿπ ŸÖÿ≠ÿ≥ŸÜ
cat > upload-frontend-fixed.sh << 'EOF'
#!/bin/bash

API_TOKEN="q6EB7IKZXX8kwN91LPlE1nn-_rkiOA8m9XvaWJFX"
ACCOUNT_ID="76f5b050419f112f1e9c5fbec1b3970d"
PROJECT_NAME="cursor-ide"

# ÿ±ŸÅÿπ ŸÖŸÑŸÅ test.html
echo "ÿ±ŸÅÿπ ŸÖŸÑŸÅ test.html..."
curl -X POST "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments" \
  -H "Authorization: Bearer $API_TOKEN" \
  -F "files=@frontend/dist/test.html" \
  -F "manifest={\"test.html\": \"test.html\"}"

echo "ÿ™ŸÖ ÿ±ŸÅÿπ ŸÖŸÑŸÅ ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ±"
EOF

chmod +x upload-frontend-fixed.sh
./upload-frontend-fixed.sh

# 8. ÿßÿÆÿ™ÿ®ÿßÿ± ŸÜŸáÿßÿ¶Ÿä
echo -e "${YELLOW}8. ÿßÿÆÿ™ÿ®ÿßÿ± ŸÜŸáÿßÿ¶Ÿä...${NC}"
sleep 5

echo -e "${YELLOW}ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©...${NC}"
MAIN_TEST=$(curl -s -w "%{http_code}" https://cursor-ide.pages.dev -o /dev/null)
echo "Main Page Status: $MAIN_TEST"

echo -e "${YELLOW}ÿßÿÆÿ™ÿ®ÿßÿ± ÿµŸÅÿ≠ÿ© ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ±...${NC}"
TEST_PAGE=$(curl -s -w "%{http_code}" https://cursor-ide.pages.dev/test.html -o /dev/null)
echo "Test Page Status: $TEST_PAGE"

# 9. ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨
echo -e "\n${GREEN}=========================================="
echo "  üìä ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÜŸáÿßÿ¶Ÿä"
echo "  üìà Final Test Results"
echo "=========================================="
echo -e "${NC}"

echo -e "${GREEN}‚úÖ Frontend Status: $FRONTEND_RESPONSE${NC}"
echo -e "${GREEN}‚úÖ Backend Status: $BACKEND_RESPONSE${NC}"
echo -e "${GREEN}‚úÖ API Status: $API_RESPONSE${NC}"
echo -e "${GREEN}‚úÖ Test Page Status: $TEST_PAGE${NC}"

echo -e "\n${BLUE}üîó ÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ±:${NC}"
echo "Main App: https://cursor-ide.pages.dev"
echo "Test Page: https://cursor-ide.pages.dev/test.html"
echo "Backend Health: https://cursor-backend.workers.dev/health"
echo "API Providers: https://cursor-backend.workers.dev/api/providers"

echo -e "\n${YELLOW}üìã ÿÆÿ∑Ÿàÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ©:${NC}"
echo "1. ÿßŸÅÿ™ÿ≠ https://cursor-ide.pages.dev/test.html"
echo "2. ÿßÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ 'Test Backend Connection'"
echo "3. ÿßÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ 'Test API'"
echo "4. ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨"

echo -e "\n${GREEN}üéâ ÿßŸÜÿ™ŸáŸâ ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿ¥ÿßŸÖŸÑ!${NC}"